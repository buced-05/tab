#!/usr/bin/env node

/**
 * üîç Script de V√©rification MySQL pour AllAdsMarket
 * V√©rifie la configuration, la connexion et l'int√©grit√© de la base de donn√©es
 */

const { testConnection, query, closePool } = require('../config/database');

// Couleurs pour les messages
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function verifyMySQL() {
  log('üîç V√©rification de la configuration MySQL AllAdsMarket', 'cyan');
  log('='.repeat(60), 'cyan');
  
  let allTestsPassed = true;

  try {
    // 1. Test de connexion
    log('\n1Ô∏è‚É£ Test de connexion √† la base de donn√©es...', 'blue');
    const isConnected = await testConnection();
    
    if (isConnected) {
      log('‚úÖ Connexion MySQL r√©ussie', 'green');
    } else {
      log('‚ùå √âchec de la connexion MySQL', 'red');
      allTestsPassed = false;
      return;
    }

    // 2. V√©rification de la base de donn√©es
    log('\n2Ô∏è‚É£ V√©rification de la base de donn√©es...', 'blue');
    const databases = await query('SHOW DATABASES');
    const alladsmarketExists = databases.some(db => db.Database === 'alladsmarket');
    
    if (alladsmarketExists) {
      log('‚úÖ Base de donn√©es "alladsmarket" trouv√©e', 'green');
    } else {
      log('‚ùå Base de donn√©es "alladsmarket" non trouv√©e', 'red');
      allTestsPassed = false;
    }

    // 3. V√©rification des utilisateurs MySQL
    log('\n3Ô∏è‚É£ V√©rification des utilisateurs MySQL...', 'blue');
    const users = await query("SELECT User, Host FROM mysql.user WHERE User = 'tab'");
    
    if (users.length > 0) {
      log('‚úÖ Utilisateur "tab" trouv√©:', 'green');
      users.forEach(user => {
        log(`   - ${user.User}@${user.Host}`, 'green');
      });
    } else {
      log('‚ùå Utilisateur "tab" non trouv√©', 'red');
      allTestsPassed = false;
    }

    // 4. V√©rification des tables
    log('\n4Ô∏è‚É£ V√©rification des tables...', 'blue');
    await query('USE alladsmarket');
    const tables = await query('SHOW TABLES');
    
    const expectedTables = [
      'users', 'categories', 'products', 'product_images', 'product_tags',
      'product_specifications', 'articles', 'comments', 'reviews', 'analytics',
      'settings', 'newsletters', 'contact_messages'
    ];
    
    const existingTables = tables.map(table => Object.values(table)[0]);
    const missingTables = expectedTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length === 0) {
      log('‚úÖ Toutes les tables requises sont pr√©sentes', 'green');
    } else {
      log('‚ö†Ô∏è  Tables manquantes:', 'yellow');
      missingTables.forEach(table => {
        log(`   - ${table}`, 'yellow');
      });
    }

    // 5. V√©rification des donn√©es
    log('\n5Ô∏è‚É£ V√©rification des donn√©es...', 'blue');
    
    // Compter les produits
    try {
      const productCount = await query('SELECT COUNT(*) as count FROM products');
      log(`üì¶ Produits: ${productCount[0].count}`, 'green');
    } catch (error) {
      log('‚ö†Ô∏è  Table products non accessible', 'yellow');
    }

    // Compter les articles
    try {
      const articleCount = await query('SELECT COUNT(*) as count FROM articles');
      log(`üì∞ Articles: ${articleCount[0].count}`, 'green');
    } catch (error) {
      log('‚ö†Ô∏è  Table articles non accessible', 'yellow');
    }

    // Compter les cat√©gories
    try {
      const categoryCount = await query('SELECT COUNT(*) as count FROM categories');
      log(`üìÇ Cat√©gories: ${categoryCount[0].count}`, 'green');
    } catch (error) {
      log('‚ö†Ô∏è  Table categories non accessible', 'yellow');
    }

    // 6. V√©rification des index
    log('\n6Ô∏è‚É£ V√©rification des index...', 'blue');
    try {
      const indexes = await query(`
        SELECT TABLE_NAME, INDEX_NAME, COLUMN_NAME 
        FROM INFORMATION_SCHEMA.STATISTICS 
        WHERE TABLE_SCHEMA = 'alladsmarket'
        ORDER BY TABLE_NAME, INDEX_NAME
      `);
      
      const indexCount = indexes.length;
      log(`üìä Index trouv√©s: ${indexCount}`, 'green');
    } catch (error) {
      log('‚ö†Ô∏è  Impossible de v√©rifier les index', 'yellow');
    }

    // 7. V√©rification des performances
    log('\n7Ô∏è‚É£ V√©rification des performances...', 'blue');
    try {
      const status = await query('SHOW STATUS LIKE "Innodb_buffer_pool%"');
      log('üìà Configuration InnoDB:', 'green');
      status.forEach(stat => {
        log(`   - ${stat.Variable_name}: ${stat.Value}`, 'green');
      });
    } catch (error) {
      log('‚ö†Ô∏è  Impossible de v√©rifier les performances', 'yellow');
    }

    // 8. Test de cr√©ation/lecture/suppression
    log('\n8Ô∏è‚É£ Test CRUD (Create, Read, Update, Delete)...', 'blue');
    try {
      // Test de cr√©ation
      const testData = {
        name: 'Test Product MySQL',
        description: 'Produit de test pour v√©rification MySQL',
        price: 99.99,
        category_id: 1
      };
      
      const insertResult = await query(`
        INSERT INTO products (name, description, price, category_id, created_at, updated_at)
        VALUES (?, ?, ?, ?, NOW(), NOW())
      `, [testData.name, testData.description, testData.price, testData.category_id]);
      
      const testId = insertResult.insertId;
      log('‚úÖ Test de cr√©ation r√©ussi', 'green');
      
      // Test de lecture
      const readResult = await query('SELECT * FROM products WHERE id = ?', [testId]);
      if (readResult.length > 0) {
        log('‚úÖ Test de lecture r√©ussi', 'green');
      } else {
        log('‚ùå Test de lecture √©chou√©', 'red');
        allTestsPassed = false;
      }
      
      // Test de mise √† jour
      await query('UPDATE products SET name = ? WHERE id = ?', ['Test Product Updated', testId]);
      log('‚úÖ Test de mise √† jour r√©ussi', 'green');
      
      // Test de suppression
      await query('DELETE FROM products WHERE id = ?', [testId]);
      log('‚úÖ Test de suppression r√©ussi', 'green');
      
    } catch (error) {
      log(`‚ùå Test CRUD √©chou√©: ${error.message}`, 'red');
      allTestsPassed = false;
    }

    // 9. V√©rification de la s√©curit√©
    log('\n9Ô∏è‚É£ V√©rification de la s√©curit√©...', 'blue');
    try {
      const privileges = await query(`
        SELECT GRANTEE, PRIVILEGE_TYPE 
        FROM INFORMATION_SCHEMA.USER_PRIVILEGES 
        WHERE GRANTEE LIKE '%tab%'
      `);
      
      log('üîí Privil√®ges utilisateur "tab":', 'green');
      privileges.forEach(priv => {
        log(`   - ${priv.PRIVILEGE_TYPE}`, 'green');
      });
    } catch (error) {
      log('‚ö†Ô∏è  Impossible de v√©rifier les privil√®ges', 'yellow');
    }

    // 10. R√©sum√© final
    log('\nüìã R√©sum√© de la v√©rification:', 'magenta');
    log('='.repeat(60), 'magenta');
    
    if (allTestsPassed) {
      log('üéâ Tous les tests MySQL sont pass√©s avec succ√®s !', 'green');
      log('‚úÖ La base de donn√©es est pr√™te pour la production', 'green');
    } else {
      log('‚ö†Ô∏è  Certains tests ont √©chou√©', 'yellow');
      log('üí° V√©rifiez la configuration et r√©essayez', 'yellow');
    }

  } catch (error) {
    log(`‚ùå Erreur lors de la v√©rification: ${error.message}`, 'red');
    allTestsPassed = false;
  } finally {
    await closePool();
  }

  process.exit(allTestsPassed ? 0 : 1);
}

// Ex√©cuter la v√©rification
if (require.main === module) {
  verifyMySQL();
}

module.exports = { verifyMySQL };
