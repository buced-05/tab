#!/usr/bin/env node

/**
 * üì¶ Script de Mise √† Jour des Articles - Champ inStock
 * Met √† jour tous les articles existants avec des valeurs inStock appropri√©es
 */

const { testConnection, query, closePool } = require('../config/database');

// Couleurs pour les messages
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// R√®gles pour d√©terminer inStock bas√©es sur le contenu de l'article
function determineInStock(article) {
  const title = (article.title || '').toLowerCase();
  const content = (article.content || '').toLowerCase();
  const excerpt = (article.excerpt || '').toLowerCase();
  
  // Mots-cl√©s indiquant que l'article est en stock
  const inStockKeywords = [
    'disponible', 'en stock', 'livraison', 'commander', 'acheter',
    'prix', 'offre', 'promotion', 'r√©duction', 'deal', 'bon plan',
    'test', 'avis', 'review', 'comparaison', 'guide d\'achat',
    'meilleur', 'top', 'recommand√©', 'populaire', 'tendance'
  ];
  
  // Mots-cl√©s indiquant que l'article n'est pas en stock
  const outOfStockKeywords = [
    'rupture', '√©puis√©', 'indisponible', 'plus disponible',
    'arr√™t√©', 'discontinu√©', 'fin de s√©rie', 'limit√©',
    '√©dition limit√©e', 'sold out', 'out of stock'
  ];
  
  // V√©rifier les mots-cl√©s "en stock"
  const hasInStockKeywords = inStockKeywords.some(keyword => 
    title.includes(keyword) || content.includes(keyword) || excerpt.includes(keyword)
  );
  
  // V√©rifier les mots-cl√©s "hors stock"
  const hasOutOfStockKeywords = outOfStockKeywords.some(keyword => 
    title.includes(keyword) || content.includes(keyword) || excerpt.includes(keyword)
  );
  
  // Logique de d√©cision
  if (hasOutOfStockKeywords) {
    return false; // Hors stock
  } else if (hasInStockKeywords) {
    return true; // En stock
  } else {
    // Par d√©faut, consid√©rer comme en stock si c'est un article publi√©
    return article.status === 'published';
  }
}

async function updateArticlesInStock() {
  log('üì¶ Mise √† jour des articles - Champ inStock', 'cyan');
  log('='.repeat(60), 'cyan');
  
  try {
    // Test de connexion
    log('\n1Ô∏è‚É£ Test de connexion √† la base de donn√©es...', 'blue');
    const isConnected = await testConnection();
    
    if (!isConnected) {
      log('‚ùå Impossible de se connecter √† la base de donn√©es', 'red');
      return;
    }
    
    log('‚úÖ Connexion √† la base de donn√©es r√©ussie', 'green');
    
    // V√©rifier si la colonne in_stock existe
    log('\n2Ô∏è‚É£ V√©rification de la colonne in_stock...', 'blue');
    try {
      const columns = await query(`
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = 'alladsmarket' 
        AND TABLE_NAME = 'articles' 
        AND COLUMN_NAME = 'in_stock'
      `);
      
      if (columns.length === 0) {
        log('‚ö†Ô∏è  Colonne in_stock non trouv√©e, ajout de la colonne...', 'yellow');
        await query('ALTER TABLE articles ADD COLUMN in_stock BOOLEAN DEFAULT TRUE');
        await query('ALTER TABLE articles ADD INDEX idx_in_stock (in_stock)');
        log('‚úÖ Colonne in_stock ajout√©e', 'green');
      } else {
        log('‚úÖ Colonne in_stock existe d√©j√†', 'green');
      }
    } catch (error) {
      log(`‚ùå Erreur lors de la v√©rification de la colonne: ${error.message}`, 'red');
      return;
    }
    
    // R√©cup√©rer tous les articles
    log('\n3Ô∏è‚É£ R√©cup√©ration des articles...', 'blue');
    const articles = await query(`
      SELECT id, title, content, excerpt, status, created_at, updated_at
      FROM articles 
      ORDER BY created_at DESC
    `);
    
    log(`üì∞ ${articles.length} articles trouv√©s`, 'green');
    
    if (articles.length === 0) {
      log('‚ö†Ô∏è  Aucun article √† mettre √† jour', 'yellow');
      return;
    }
    
    // Mettre √† jour chaque article
    log('\n4Ô∏è‚É£ Mise √† jour des articles...', 'blue');
    let updatedCount = 0;
    let inStockCount = 0;
    let outOfStockCount = 0;
    
    for (const article of articles) {
      try {
        const inStock = determineInStock(article);
        
        await query(
          'UPDATE articles SET in_stock = ? WHERE id = ?',
          [inStock, article.id]
        );
        
        updatedCount++;
        if (inStock) {
          inStockCount++;
        } else {
          outOfStockCount++;
        }
        
        log(`‚úÖ Article "${article.title.substring(0, 50)}..." - ${inStock ? 'En stock' : 'Hors stock'}`, 'green');
        
      } catch (error) {
        log(`‚ùå Erreur lors de la mise √† jour de l'article ${article.id}: ${error.message}`, 'red');
      }
    }
    
    // R√©sum√©
    log('\nüìä R√©sum√© de la mise √† jour:', 'magenta');
    log('='.repeat(60), 'magenta');
    log(`‚úÖ Articles mis √† jour: ${updatedCount}/${articles.length}`, 'green');
    log(`üì¶ En stock: ${inStockCount}`, 'green');
    log(`‚ùå Hors stock: ${outOfStockCount}`, 'red');
    
    // V√©rification finale
    log('\n5Ô∏è‚É£ V√©rification finale...', 'blue');
    const finalStats = await query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN in_stock = 1 THEN 1 ELSE 0 END) as in_stock,
        SUM(CASE WHEN in_stock = 0 THEN 1 ELSE 0 END) as out_of_stock
      FROM articles
    `);
    
    const stats = finalStats[0];
    log(`üìä Statistiques finales:`, 'green');
    log(`   - Total: ${stats.total}`, 'green');
    log(`   - En stock: ${stats.in_stock}`, 'green');
    log(`   - Hors stock: ${stats.out_of_stock}`, 'red');
    
    log('\nüéâ Mise √† jour termin√©e avec succ√®s !', 'green');
    
  } catch (error) {
    log(`‚ùå Erreur lors de la mise √† jour: ${error.message}`, 'red');
  } finally {
    await closePool();
  }
}

// Ex√©cuter la mise √† jour
if (require.main === module) {
  updateArticlesInStock();
}

module.exports = { updateArticlesInStock, determineInStock };
