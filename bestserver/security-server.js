#!/usr/bin/env node

/**
 * üîí Configuration de S√©curit√© Avanc√©e - AllAdsMarket
 * Protection contre phishing, injections SQL, et failles de s√©curit√©
 */

import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import mongoSanitize from 'express-mongo-sanitize';
import xss from 'xss-clean';
import hpp from 'hpp';
import compression from 'compression';
import { body, validationResult } from 'express-validator';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import mysql from 'mysql2/promise';

// Configuration de s√©curit√©
const SECURITY_CONFIG = {
  // JWT
  JWT_SECRET: process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production-' + Date.now(),
  JWT_EXPIRES_IN: '24h',
  
  // Rate Limiting
  RATE_LIMIT_WINDOW: 15 * 60 * 1000, // 15 minutes
  RATE_LIMIT_MAX: 100, // 100 requ√™tes par fen√™tre
  
  // CORS
  ALLOWED_ORIGINS: [
    'https://alladsmarket.com',
    'https://www.alladsmarket.com',
    'http://localhost:3000',
    'http://localhost:3001'
  ],
  
  // Headers de s√©curit√©
  SECURITY_HEADERS: {
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
    'X-XSS-Protection': '1; mode=block',
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',
    'Cross-Origin-Embedder-Policy': 'require-corp',
    'Cross-Origin-Opener-Policy': 'same-origin',
    'Cross-Origin-Resource-Policy': 'same-origin'
  }
};

// Configuration de la base de donn√©es s√©curis√©e
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'your_mysql_user',
  password: process.env.DB_PASSWORD || 'your_mysql_password',
  database: process.env.DB_NAME || 'alladsmarket',
  port: process.env.DB_PORT || 3306,
  // Configuration de s√©curit√© MySQL
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  // Protection contre les injections SQL
  multipleStatements: false,
  // Timeout de connexion
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true,
  // Charset s√©curis√©
  charset: 'utf8mb4',
  timezone: '+00:00'
};

// Cr√©er le pool de connexions s√©curis√©
const pool = mysql.createPool(dbConfig);

// Middleware de s√©curit√© avanc√©
function createSecurityMiddleware() {
  const app = express();
  
  // 1. Helmet pour les headers de s√©curit√©
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
        scriptSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
        fontSrc: ["'self'", "https://fonts.gstatic.com"],
        imgSrc: ["'self'", "data:", "https:", "http:"],
        connectSrc: ["'self'"],
        frameSrc: ["'none'"],
        objectSrc: ["'none'"],
        upgradeInsecureRequests: []
      }
    },
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true
    }
  }));
  
  // 2. CORS s√©curis√©
  app.use(cors({
    origin: function (origin, callback) {
      // Autoriser les requ√™tes sans origin (mobile apps, Postman, etc.)
      if (!origin) return callback(null, true);
      
      if (SECURITY_CONFIG.ALLOWED_ORIGINS.includes(origin)) {
        callback(null, true);
      } else {
        console.log(`üö® Tentative d'acc√®s non autoris√©e depuis: ${origin}`);
        callback(new Error('Non autoris√© par CORS'));
      }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    exposedHeaders: ['X-Total-Count']
  }));
  
  // 3. Rate Limiting
  const limiter = rateLimit({
    windowMs: SECURITY_CONFIG.RATE_LIMIT_WINDOW,
    max: SECURITY_CONFIG.RATE_LIMIT_MAX,
    message: {
      error: 'Trop de requ√™tes depuis cette IP, r√©essayez plus tard.',
      retryAfter: Math.ceil(SECURITY_CONFIG.RATE_LIMIT_WINDOW / 1000)
    },
    standardHeaders: true,
    legacyHeaders: false,
    // Ignorer les IPs de confiance (optionnel)
    skip: (req) => {
      const trustedIPs = ['127.0.0.1', '::1'];
      return trustedIPs.includes(req.ip);
    }
  });
  
  app.use('/api/', limiter);
  
  // 4. Protection contre les injections NoSQL
  app.use(mongoSanitize());
  
  // 5. Protection XSS
  app.use(xss());
  
  // 6. Protection contre la pollution des param√®tres HTTP
  app.use(hpp());
  
  // 7. Compression s√©curis√©e
  app.use(compression({
    filter: (req, res) => {
      if (req.headers['x-no-compression']) {
        return false;
      }
      return compression.filter(req, res);
    }
  }));
  
  // 8. Parsing s√©curis√© du JSON
  app.use(express.json({ 
    limit: '10mb',
    verify: (req, res, buf) => {
      // V√©rifier la taille du payload
      if (buf.length > 10 * 1024 * 1024) {
        throw new Error('Payload trop volumineux');
      }
    }
  }));
  
  app.use(express.urlencoded({ 
    extended: true, 
    limit: '10mb',
    parameterLimit: 100
  }));
  
  // 9. Headers de s√©curit√© personnalis√©s
  app.use((req, res, next) => {
    Object.entries(SECURITY_CONFIG.SECURITY_HEADERS).forEach(([key, value]) => {
      res.setHeader(key, value);
    });
    
    // Ajouter un header de s√©curit√© personnalis√©
    res.setHeader('X-Security-Level', 'High');
    res.setHeader('X-Content-Security', 'Protected');
    
    next();
  });
  
  return app;
}

// Validation des donn√©es d'entr√©e
const validationRules = {
  // Validation pour les produits
  product: [
    body('name').trim().isLength({ min: 3, max: 255 }).escape(),
    body('description').trim().isLength({ min: 10, max: 5000 }).escape(),
    body('price').isFloat({ min: 0, max: 999999.99 }),
    body('category').trim().isLength({ min: 2, max: 100 }).escape(),
    body('brand').optional().trim().isLength({ max: 100 }).escape(),
    body('sku').optional().trim().isLength({ max: 100 }).escape()
  ],
  
  // Validation pour les articles
  article: [
    body('title').trim().isLength({ min: 10, max: 255 }).escape(),
    body('content').trim().isLength({ min: 100, max: 50000 }).escape(),
    body('excerpt').optional().trim().isLength({ max: 500 }).escape(),
    body('category_id').isInt({ min: 1 })
  ],
  
  // Validation pour l'authentification
  auth: [
    body('username').trim().isLength({ min: 3, max: 50 }).escape(),
    body('password').isLength({ min: 8, max: 128 })
  ]
};

// Middleware de validation
function validateRequest(req, res, next) {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      message: 'Donn√©es invalides',
      errors: errors.array()
    });
  }
  next();
}

// Protection contre les injections SQL
class SecureDatabase {
  constructor(pool) {
    this.pool = pool;
  }
  
  // Requ√™te s√©curis√©e avec param√®tres pr√©par√©s
  async query(sql, params = []) {
    try {
      // V√©rifier que la requ√™te ne contient pas de mots-cl√©s dangereux
      const dangerousKeywords = [
        'DROP', 'DELETE', 'UPDATE', 'INSERT', 'ALTER', 'CREATE', 'TRUNCATE',
        'EXEC', 'EXECUTE', 'UNION', 'SELECT *', 'INFORMATION_SCHEMA'
      ];
      
      const upperSql = sql.toUpperCase();
      for (const keyword of dangerousKeywords) {
        if (upperSql.includes(keyword) && !upperSql.includes('WHERE')) {
          throw new Error(`Requ√™te potentiellement dangereuse d√©tect√©e: ${keyword}`);
        }
      }
      
      const [rows] = await this.pool.execute(sql, params);
      return rows;
    } catch (error) {
      console.error('üö® Erreur de base de donn√©es s√©curis√©e:', error.message);
      throw new Error('Erreur de base de donn√©es');
    }
  }
  
  // Requ√™te s√©curis√©e pour les produits
  async getProducts(limit = 50, offset = 0) {
    const sql = 'SELECT * FROM products WHERE status = ? LIMIT ? OFFSET ?';
    return await this.query(sql, ['active', limit, offset]);
  }
  
  // Requ√™te s√©curis√©e pour un produit sp√©cifique
  async getProductById(id) {
    // V√©rifier que l'ID est un nombre
    if (!Number.isInteger(parseInt(id))) {
      throw new Error('ID de produit invalide');
    }
    
    const sql = 'SELECT * FROM products WHERE id = ? AND status = ?';
    const results = await this.query(sql, [id, 'active']);
    return results[0] || null;
  }
  
  // Requ√™te s√©curis√©e pour les articles
  async getArticles(limit = 50, offset = 0) {
    const sql = 'SELECT * FROM articles WHERE status = ? LIMIT ? OFFSET ?';
    return await this.query(sql, ['published', limit, offset]);
  }
}

// Protection contre le phishing
class PhishingProtection {
  static checkUrl(url) {
    const suspiciousPatterns = [
      /bit\.ly/i,
      /tinyurl/i,
      /goo\.gl/i,
      /t\.co/i,
      /amzn\.to/i,
      /amazon\.com\/dp\//i,
      /amazon\.fr\/dp\//i,
      /amazon\.co\.uk\/dp\//i
    ];
    
    // V√©rifier les patterns suspects
    for (const pattern of suspiciousPatterns) {
      if (pattern.test(url)) {
        console.log(`üö® URL suspecte d√©tect√©e: ${url}`);
        return false;
      }
    }
    
    return true;
  }
  
  static sanitizeUrl(url) {
    try {
      const urlObj = new URL(url);
      
      // V√©rifier le protocole
      if (!['http:', 'https:'].includes(urlObj.protocol)) {
        throw new Error('Protocole non autoris√©');
      }
      
      // V√©rifier le domaine
      const allowedDomains = [
        'alladsmarket.com',
        'amazon.com',
        'amazon.fr',
        'amazon.co.uk',
        'amazon.de',
        'amazon.it',
        'amazon.es'
      ];
      
      const hostname = urlObj.hostname.toLowerCase();
      const isAllowed = allowedDomains.some(domain => 
        hostname === domain || hostname.endsWith('.' + domain)
      );
      
      if (!isAllowed) {
        throw new Error('Domaine non autoris√©');
      }
      
      return urlObj.toString();
    } catch (error) {
      console.log(`üö® URL invalide: ${url} - ${error.message}`);
      return null;
    }
  }
}

// Middleware de protection contre le phishing
function phishingProtection(req, res, next) {
  // V√©rifier les URLs dans le body
  if (req.body && typeof req.body === 'object') {
    for (const [key, value] of Object.entries(req.body)) {
      if (typeof value === 'string' && value.startsWith('http')) {
        const sanitizedUrl = PhishingProtection.sanitizeUrl(value);
        if (!sanitizedUrl) {
          return res.status(400).json({
            success: false,
            message: 'URL non autoris√©e d√©tect√©e'
          });
        }
        req.body[key] = sanitizedUrl;
      }
    }
  }
  
  next();
}

// Protection CSRF
function csrfProtection(req, res, next) {
  // V√©rifier le token CSRF pour les requ√™tes POST/PUT/DELETE
  if (['POST', 'PUT', 'DELETE'].includes(req.method)) {
    const csrfToken = req.headers['x-csrf-token'];
    const sessionToken = req.session?.csrfToken;
    
    if (!csrfToken || !sessionToken || csrfToken !== sessionToken) {
      return res.status(403).json({
        success: false,
        message: 'Token CSRF invalide'
      });
    }
  }
  
  next();
}

// Logging de s√©curit√©
function securityLogger(req, res, next) {
  const startTime = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - startTime;
    const logData = {
      timestamp: new Date().toISOString(),
      method: req.method,
      url: req.url,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      statusCode: res.statusCode,
      duration: duration,
      contentLength: res.get('Content-Length')
    };
    
    // Log des activit√©s suspectes
    if (res.statusCode >= 400) {
      console.log('üö® Activit√© suspecte d√©tect√©e:', logData);
    }
    
    // Log des requ√™tes lentes
    if (duration > 5000) {
      console.log('‚ö†Ô∏è Requ√™te lente d√©tect√©e:', logData);
    }
  });
  
  next();
}

// Fonction principale pour cr√©er l'application s√©curis√©e
function createSecureApp() {
  const app = createSecurityMiddleware();
  
  // Ajouter les middlewares de s√©curit√©
  app.use(securityLogger);
  app.use(phishingProtection);
  app.use(csrfProtection);
  
  // Cr√©er l'instance de base de donn√©es s√©curis√©e
  const secureDB = new SecureDatabase(pool);
  
  // Routes s√©curis√©es
  app.get('/api/health', (req, res) => {
    res.json({
      status: 'OK',
      security: 'High',
      timestamp: new Date().toISOString()
    });
  });
  
  // Route pour les produits (s√©curis√©e)
  app.get('/api/products', async (req, res) => {
    try {
      const limit = Math.min(parseInt(req.query.limit) || 50, 100);
      const offset = Math.max(parseInt(req.query.offset) || 0, 0);
      
      const products = await secureDB.getProducts(limit, offset);
      res.json({
        success: true,
        data: products,
        pagination: {
          limit,
          offset,
          total: products.length
        }
      });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des produits:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur interne du serveur'
      });
    }
  });
  
  // Route pour un produit sp√©cifique (s√©curis√©e)
  app.get('/api/products/:id', async (req, res) => {
    try {
      const product = await secureDB.getProductById(req.params.id);
      
      if (!product) {
        return res.status(404).json({
          success: false,
          message: 'Produit non trouv√©'
        });
      }
      
      res.json({
        success: true,
        data: product
      });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du produit:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur interne du serveur'
      });
    }
  });
  
  // Route pour les articles (s√©curis√©e)
  app.get('/api/articles', async (req, res) => {
    try {
      const limit = Math.min(parseInt(req.query.limit) || 50, 100);
      const offset = Math.max(parseInt(req.query.offset) || 0, 0);
      
      const articles = await secureDB.getArticles(limit, offset);
      res.json({
        success: true,
        data: articles,
        pagination: {
          limit,
          offset,
          total: articles.length
        }
      });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des articles:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur interne du serveur'
      });
    }
  });
  
  // Gestionnaire d'erreurs global
  app.use((error, req, res, next) => {
    console.error('üö® Erreur de s√©curit√©:', error);
    
    res.status(500).json({
      success: false,
      message: 'Erreur interne du serveur',
      timestamp: new Date().toISOString()
    });
  });
  
  // Route 404 s√©curis√©e
  app.use('*', (req, res) => {
    res.status(404).json({
      success: false,
      message: 'Route non trouv√©e',
      timestamp: new Date().toISOString()
    });
  });
  
  return app;
}

// Export des composants de s√©curit√©
export {
  createSecureApp,
  SECURITY_CONFIG,
  PhishingProtection,
  SecureDatabase,
  validationRules,
  validateRequest
};

// Si ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  const app = createSecureApp();
  const PORT = process.env.PORT || 5000;
  
  app.listen(PORT, () => {
    console.log(`üîí Serveur s√©curis√© d√©marr√© sur le port ${PORT}`);
    console.log(`üõ°Ô∏è Protection: Phishing, SQL Injection, XSS, CSRF`);
    console.log(`üöÄ Mode: ${process.env.NODE_ENV || 'development'}`);
  });
}
