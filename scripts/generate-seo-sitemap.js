#!/usr/bin/env node

/**
 * üó∫Ô∏è G√©n√©rateur de Sitemap SEO Avanc√© - AllAdsMarket
 * Cr√©e un sitemap XML optimis√© pour le r√©f√©rencement
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const SITE_URL = 'https://alladsmarket.com';
const SITE_NAME = 'AllAdsMarket';
const CURRENT_DATE = new Date().toISOString();

// Couleurs pour les messages
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// 1. G√©n√©ration des URLs principales
function generateMainURLs() {
  log('\n1Ô∏è‚É£ G√©n√©ration des URLs principales...', 'blue');
  
  const mainURLs = [
    {
      url: '/',
      priority: '1.0',
      changefreq: 'daily',
      lastmod: CURRENT_DATE,
      title: 'Accueil - AllAdsMarket',
      description: 'Guide d\'achat et comparatifs produits'
    },
    {
      url: '/produits',
      priority: '0.9',
      changefreq: 'daily',
      lastmod: CURRENT_DATE,
      title: 'Produits - AllAdsMarket',
      description: 'D√©couvrez tous nos produits et guides d\'achat'
    },
    {
      url: '/articles',
      priority: '0.9',
      changefreq: 'daily',
      lastmod: CURRENT_DATE,
      title: 'Articles - AllAdsMarket',
      description: 'Guides d\'achat d√©taill√©s et tests produits'
    },
    {
      url: '/categories',
      priority: '0.8',
      changefreq: 'weekly',
      lastmod: CURRENT_DATE,
      title: 'Cat√©gories - AllAdsMarket',
      description: 'Explorez nos cat√©gories de produits'
    },
    {
      url: '/a-propos',
      priority: '0.6',
      changefreq: 'monthly',
      lastmod: CURRENT_DATE,
      title: '√Ä Propos - AllAdsMarket',
      description: 'D√©couvrez notre √©quipe et notre mission'
    },
    {
      url: '/contact',
      priority: '0.6',
      changefreq: 'monthly',
      lastmod: CURRENT_DATE,
      title: 'Contact - AllAdsMarket',
      description: 'Contactez notre √©quipe d\'experts'
    },
    {
      url: '/politique-confidentialite',
      priority: '0.3',
      changefreq: 'yearly',
      lastmod: CURRENT_DATE,
      title: 'Politique de Confidentialit√© - AllAdsMarket',
      description: 'Notre politique de confidentialit√©'
    },
    {
      url: '/conditions-utilisation',
      priority: '0.3',
      changefreq: 'yearly',
      lastmod: CURRENT_DATE,
      title: 'Conditions d\'Utilisation - AllAdsMarket',
      description: 'Nos conditions d\'utilisation'
    }
  ];
  
  log(`‚úÖ ${mainURLs.length} URLs principales g√©n√©r√©es`, 'green');
  return mainURLs;
}

// 2. G√©n√©ration des URLs de cat√©gories
function generateCategoryURLs() {
  log('\n2Ô∏è‚É£ G√©n√©ration des URLs de cat√©gories...', 'blue');
  
  const categories = [
    { slug: 'electronique', name: '√âlectronique', priority: '0.8' },
    { slug: 'maison-jardin', name: 'Maison et Jardin', priority: '0.8' },
    { slug: 'mode-beaute', name: 'Mode et Beaut√©', priority: '0.8' },
    { slug: 'sport-loisirs', name: 'Sport et Loisirs', priority: '0.8' },
    { slug: 'automobile', name: 'Automobile', priority: '0.8' },
    { slug: 'alimentation', name: 'Alimentation', priority: '0.8' },
    { slug: 'bebe-enfant', name: 'B√©b√© et Enfant', priority: '0.8' },
    { slug: 'animaux', name: 'Animaux', priority: '0.8' },
    { slug: 'bricolage', name: 'Bricolage', priority: '0.8' },
    { slug: 'livres', name: 'Livres', priority: '0.8' }
  ];
  
  const categoryURLs = categories.map(category => ({
    url: `/categories/${category.slug}`,
    priority: category.priority,
    changefreq: 'weekly',
    lastmod: CURRENT_DATE,
    title: `${category.name} - AllAdsMarket`,
    description: `Guide d'achat ${category.name.toLowerCase()}`
  }));
  
  log(`‚úÖ ${categoryURLs.length} URLs de cat√©gories g√©n√©r√©es`, 'green');
  return categoryURLs;
}

// 3. G√©n√©ration des URLs de produits
async function generateProductURLs() {
  log('\n3Ô∏è‚É£ G√©n√©ration des URLs de produits...', 'blue');
  
  try {
    // Lire les donn√©es des produits
    const productsPath = path.join(__dirname, '../src/utils/sampleData.js');
    
    if (!fs.existsSync(productsPath)) {
      log('‚ö†Ô∏è  Fichier sampleData.js non trouv√©', 'yellow');
      return [];
    }
    
    // Import dynamique du module
    const { getSampleProducts } = await import('../src/utils/sampleData.js');
    const products = getSampleProducts();
    
    const productURLs = products.map(product => {
      // G√©n√©rer un slug √† partir du nom
      const slug = product.name
        .toLowerCase()
        .replace(/[^a-z0-9 -]/g, '')
        .replace(/\s+/g, '-')
        .substring(0, 100);
      
      return {
        url: `/produit/${product._id}`,
        priority: product.isFeatured ? '0.9' : '0.7',
        changefreq: 'weekly',
        lastmod: CURRENT_DATE,
        title: `${product.name} - AllAdsMarket`,
        description: product.description || `Guide d'achat ${product.name}`,
        images: product.images ? product.images.map(img => ({
          url: img.url,
          title: `${product.name} - Image`,
          caption: product.name
        })) : []
      };
    });
    
    log(`‚úÖ ${productURLs.length} URLs de produits g√©n√©r√©es`, 'green');
    return productURLs;
    
  } catch (error) {
    log(`‚ùå Erreur lors de la g√©n√©ration des produits: ${error.message}`, 'red');
    return [];
  }
}

// 4. G√©n√©ration des URLs d'articles
async function generateArticleURLs() {
  log('\n4Ô∏è‚É£ G√©n√©ration des URLs d\'articles...', 'blue');
  
  try {
    const articlesPath = path.join(__dirname, '../src/data/articles.json');
    
    if (!fs.existsSync(articlesPath)) {
      log('‚ö†Ô∏è  Fichier articles.json non trouv√©', 'yellow');
      return [];
    }
    
    const articlesData = JSON.parse(fs.readFileSync(articlesPath, 'utf8'));
    
    const articleURLs = articlesData.map(article => {
      // G√©n√©rer un slug √† partir du titre
      const slug = article.title
        .toLowerCase()
        .replace(/[^a-z0-9 -]/g, '')
        .replace(/\s+/g, '-')
        .substring(0, 100);
      
      return {
        url: `/article/${article.productId}`,
        priority: article.status === 'published' ? '0.8' : '0.5',
        changefreq: 'monthly',
        lastmod: CURRENT_DATE,
        title: article.title,
        description: article.excerpt || article.title,
        images: article.featuredImage ? [{
          url: article.featuredImage,
          title: article.title,
          caption: article.title
        }] : []
      };
    });
    
    log(`‚úÖ ${articleURLs.length} URLs d'articles g√©n√©r√©es`, 'green');
    return articleURLs;
    
  } catch (error) {
    log(`‚ùå Erreur lors de la g√©n√©ration des articles: ${error.message}`, 'red');
    return [];
  }
}

// 5. G√©n√©ration des URLs de recherche et filtres
function generateSearchURLs() {
  log('\n5Ô∏è‚É£ G√©n√©ration des URLs de recherche...', 'blue');
  
  const searchTerms = [
    'guide-achat',
    'comparatif',
    'test-produit',
    'avis-expert',
    'meilleur-produit',
    'recommandation',
    'prix-bas',
    'promotion',
    'nouveaute',
    'tendance'
  ];
  
  const searchURLs = searchTerms.map(term => ({
    url: `/recherche/${term}`,
    priority: '0.6',
    changefreq: 'weekly',
    lastmod: CURRENT_DATE,
    title: `${term.replace('-', ' ')} - AllAdsMarket`,
    description: `Recherche ${term.replace('-', ' ')}`
  }));
  
  log(`‚úÖ ${searchURLs.length} URLs de recherche g√©n√©r√©es`, 'green');
  return searchURLs;
}

// 6. G√©n√©ration du sitemap XML
function generateSitemapXML(allURLs) {
  log('\n6Ô∏è‚É£ G√©n√©ration du sitemap XML...', 'blue');
  
  let sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"
        xmlns:news="http://www.google.com/schemas/sitemap-news/0.9"
        xmlns:xhtml="http://www.w3.org/1999/xhtml">
`;

  allURLs.forEach(urlData => {
    sitemap += `  <url>
    <loc>${SITE_URL}${urlData.url}</loc>
    <lastmod>${urlData.lastmod}</lastmod>
    <changefreq>${urlData.changefreq}</changefreq>
    <priority>${urlData.priority}</priority>`;
    
    // Ajouter les images si pr√©sentes
    if (urlData.images && urlData.images.length > 0) {
      urlData.images.forEach(image => {
        sitemap += `
    <image:image>
      <image:loc>${image.url}</image:loc>
      <image:title><![CDATA[${image.title}]]></image:title>
      <image:caption><![CDATA[${image.caption}]]></image:caption>
    </image:image>`;
      });
    }
    
    sitemap += `
  </url>
`;
  });

  sitemap += `</urlset>`;
  
  log('‚úÖ Sitemap XML g√©n√©r√©', 'green');
  return sitemap;
}

// 7. G√©n√©ration du sitemap index
function generateSitemapIndex() {
  log('\n7Ô∏è‚É£ G√©n√©ration du sitemap index...', 'blue');
  
  const sitemapIndex = `<?xml version="1.0" encoding="UTF-8"?>
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <sitemap>
    <loc>${SITE_URL}/sitemap.xml</loc>
    <lastmod>${CURRENT_DATE}</lastmod>
  </sitemap>
  <sitemap>
    <loc>${SITE_URL}/sitemap-images.xml</loc>
    <lastmod>${CURRENT_DATE}</lastmod>
  </sitemap>
  <sitemap>
    <loc>${SITE_URL}/sitemap-news.xml</loc>
    <lastmod>${CURRENT_DATE}</lastmod>
  </sitemap>
</sitemapindex>`;
  
  log('‚úÖ Sitemap index g√©n√©r√©', 'green');
  return sitemapIndex;
}

// 8. G√©n√©ration du sitemap images
function generateImageSitemap(allURLs) {
  log('\n8Ô∏è‚É£ G√©n√©ration du sitemap images...', 'blue');
  
  let imageSitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
`;

  allURLs.forEach(urlData => {
    if (urlData.images && urlData.images.length > 0) {
      imageSitemap += `  <url>
    <loc>${SITE_URL}${urlData.url}</loc>
    <lastmod>${urlData.lastmod}</lastmod>`;
      
      urlData.images.forEach(image => {
        imageSitemap += `
    <image:image>
      <image:loc>${image.url}</image:loc>
      <image:title><![CDATA[${image.title}]]></image:title>
      <image:caption><![CDATA[${image.caption}]]></image:caption>
    </image:image>`;
      });
      
      imageSitemap += `
  </url>
`;
    }
  });

  imageSitemap += `</urlset>`;
  
  log('‚úÖ Sitemap images g√©n√©r√©', 'green');
  return imageSitemap;
}

// 9. G√©n√©ration du sitemap news
function generateNewsSitemap(allURLs) {
  log('\n7Ô∏è‚É£ G√©n√©ration du sitemap news...', 'blue');
  
  let newsSitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:news="http://www.google.com/schemas/sitemap-news/0.9">
`;

  // Filtrer les articles r√©cents (derniers 2 jours)
  const recentArticles = allURLs.filter(url => 
    url.url.startsWith('/article/') && 
    new Date(url.lastmod) > new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
  );

  recentArticles.forEach(article => {
    newsSitemap += `  <url>
    <loc>${SITE_URL}${article.url}</loc>
    <lastmod>${article.lastmod}</lastmod>
    <news:news>
      <news:publication>
        <news:name>${SITE_NAME}</news:name>
        <news:language>fr</news:language>
      </news:publication>
      <news:publication_date>${article.lastmod}</news:publication_date>
      <news:title><![CDATA[${article.title}]]></news:title>
    </news:news>
  </url>
`;
  });

  newsSitemap += `</urlset>`;
  
  log(`‚úÖ Sitemap news g√©n√©r√© (${recentArticles.length} articles r√©cents)`, 'green');
  return newsSitemap;
}

// Fonction principale
async function generateSEOSitemap() {
  log('üó∫Ô∏è G√©n√©ration du Sitemap SEO Avanc√© - AllAdsMarket', 'cyan');
  log('='.repeat(60), 'cyan');
  
  try {
    // 1. G√©n√©rer toutes les URLs
    const mainURLs = generateMainURLs();
    const categoryURLs = generateCategoryURLs();
    const productURLs = await generateProductURLs();
    const articleURLs = await generateArticleURLs();
    const searchURLs = generateSearchURLs();
    
    // 2. Combiner toutes les URLs
    const allURLs = [
      ...mainURLs,
      ...categoryURLs,
      ...productURLs,
      ...articleURLs,
      ...searchURLs
    ];
    
    log(`\nüìä Total des URLs: ${allURLs.length}`, 'magenta');
    
    // 3. G√©n√©rer les sitemaps
    const sitemapXML = generateSitemapXML(allURLs);
    const sitemapIndex = generateSitemapIndex();
    const imageSitemap = generateImageSitemap(allURLs);
    const newsSitemap = generateNewsSitemap(allURLs);
    
    // 4. Sauvegarder les fichiers
    const publicDir = path.join(__dirname, '../public');
    
    // Sitemap principal
    fs.writeFileSync(path.join(publicDir, 'sitemap.xml'), sitemapXML);
    log('‚úÖ sitemap.xml sauvegard√©', 'green');
    
    // Sitemap index
    fs.writeFileSync(path.join(publicDir, 'sitemap-index.xml'), sitemapIndex);
    log('‚úÖ sitemap-index.xml sauvegard√©', 'green');
    
    // Sitemap images
    fs.writeFileSync(path.join(publicDir, 'sitemap-images.xml'), imageSitemap);
    log('‚úÖ sitemap-images.xml sauvegard√©', 'green');
    
    // Sitemap news
    fs.writeFileSync(path.join(publicDir, 'sitemap-news.xml'), newsSitemap);
    log('‚úÖ sitemap-news.xml sauvegard√©', 'green');
    
    // 5. Mettre √† jour robots.txt
    updateRobotsTxt();
    
    // R√©sum√©
    log('\nüìä R√©sum√© de la g√©n√©ration:', 'magenta');
    log('='.repeat(60), 'magenta');
    
    log(`‚úÖ URLs principales: ${mainURLs.length}`, 'green');
    log(`‚úÖ URLs cat√©gories: ${categoryURLs.length}`, 'green');
    log(`‚úÖ URLs produits: ${productURLs.length}`, 'green');
    log(`‚úÖ URLs articles: ${articleURLs.length}`, 'green');
    log(`‚úÖ URLs recherche: ${searchURLs.length}`, 'green');
    log(`‚úÖ Total URLs: ${allURLs.length}`, 'green');
    
    log('\nüìÅ Fichiers g√©n√©r√©s:', 'blue');
    log('   üìÑ sitemap.xml (principal)', 'cyan');
    log('   üìÑ sitemap-index.xml (index)', 'cyan');
    log('   üìÑ sitemap-images.xml (images)', 'cyan');
    log('   üìÑ sitemap-news.xml (actualit√©s)', 'cyan');
    log('   üìÑ robots.txt (mis √† jour)', 'cyan');
    
    log('\nüí° Prochaines √©tapes:', 'blue');
    log('   1. Soumettez les sitemaps aux moteurs de recherche', 'blue');
    log('   2. V√©rifiez l\'indexation dans Search Console', 'blue');
    log('   3. Surveillez les erreurs de crawl', 'blue');
    log('   4. Mettez √† jour r√©guli√®rement', 'blue');
    
    return {
      totalURLs: allURLs.length,
      mainURLs: mainURLs.length,
      categoryURLs: categoryURLs.length,
      productURLs: productURLs.length,
      articleURLs: articleURLs.length,
      searchURLs: searchURLs.length
    };
    
  } catch (error) {
    log(`‚ùå Erreur lors de la g√©n√©ration: ${error.message}`, 'red');
    return null;
  }
}

// Mettre √† jour robots.txt
function updateRobotsTxt() {
  log('\n9Ô∏è‚É£ Mise √† jour de robots.txt...', 'blue');
  
  const robotsContent = `# AllAdsMarket - Robots.txt
# Optimis√© pour le SEO et l'indexation des moteurs de recherche

# R√®gles g√©n√©rales pour tous les robots
User-agent: *
Allow: /
Disallow: /admin/
Disallow: /private/
Disallow: /api/
Disallow: /_next/
Disallow: /node_modules/
Disallow: /*.json$
Disallow: /*.js$
Disallow: /*.css$

# R√®gles sp√©cifiques pour Google
User-agent: Googlebot
Allow: /
Crawl-delay: 1

# R√®gles sp√©cifiques pour Bing
User-agent: Bingbot
Allow: /
Crawl-delay: 1

# R√®gles sp√©cifiques pour Yandex
User-agent: YandexBot
Allow: /
Crawl-delay: 2

# R√®gles pour les images
User-agent: Googlebot-Image
Allow: /images/
Allow: /assets/
Disallow: /admin/images/

# R√®gles pour les vid√©os
User-agent: Googlebot-Video
Allow: /videos/
Disallow: /admin/videos/

# Bloquer les bots malveillants
User-agent: AhrefsBot
Disallow: /

User-agent: MJ12bot
Disallow: /

User-agent: DotBot
Disallow: /

# Sitemaps
Sitemap: ${SITE_URL}/sitemap.xml
Sitemap: ${SITE_URL}/sitemap-index.xml
Sitemap: ${SITE_URL}/sitemap-images.xml
Sitemap: ${SITE_URL}/sitemap-news.xml

# Informations sur le site
Host: ${SITE_URL}`;

  const publicDir = path.join(__dirname, '../public');
  fs.writeFileSync(path.join(publicDir, 'robots.txt'), robotsContent);
  
  log('‚úÖ robots.txt mis √† jour', 'green');
}

// Ex√©cuter la g√©n√©ration
generateSEOSitemap();

export { generateSEOSitemap };
