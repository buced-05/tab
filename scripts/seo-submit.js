const axios = require('axios');
const fs = require('fs');
const path = require('path');

// Configuration
const config = {
  baseUrl: 'https://alladsmarket.com',
  sitemapUrl: 'https://alladsmarket.com/sitemap.xml',
  googleSearchConsole: {
    // Remplacez par vos vraies cl√©s API
    apiKey: 'YOUR_GOOGLE_API_KEY',
    searchEngineId: 'YOUR_SEARCH_ENGINE_ID'
  },
  bingWebmaster: {
    apiKey: 'YOUR_BING_API_KEY'
  }
};

// Fonction pour soumettre le sitemap √† Google
async function submitToGoogle() {
  try {
    console.log('üîÑ Soumission du sitemap √† Google...');
    
    const response = await axios.get(
      `https://www.googleapis.com/webmasters/v3/sites/${encodeURIComponent(config.baseUrl)}/sitemaps/${encodeURIComponent(config.sitemapUrl)}`,
      {
        headers: {
          'Authorization': `Bearer ${config.googleSearchConsole.apiKey}`
        }
      }
    );
    
    console.log('‚úÖ Sitemap soumis √† Google avec succ√®s');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  Soumission Google √©chou√©e (normal si pas configur√©)');
    console.log('   Pour configurer : https://search.google.com/search-console');
    return false;
  }
}

// Fonction pour soumettre le sitemap √† Bing
async function submitToBing() {
  try {
    console.log('üîÑ Soumission du sitemap √† Bing...');
    
    const response = await axios.post(
      'https://ssl.bing.com/webmaster/api.svc/json/SubmitUrlBatch',
      {
        siteUrl: config.baseUrl,
        urlList: [config.sitemapUrl]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'apiKey': config.bingWebmaster.apiKey
        }
      }
    );
    
    console.log('‚úÖ Sitemap soumis √† Bing avec succ√®s');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  Soumission Bing √©chou√©e (normal si pas configur√©)');
    console.log('   Pour configurer : https://www.bing.com/webmasters');
    return false;
  }
}

// Fonction pour soumettre √† Yandex
async function submitToYandex() {
  try {
    console.log('üîÑ Soumission du sitemap √† Yandex...');
    
    const response = await axios.get(
      `https://webmaster.yandex.com/ping?sitemap=${encodeURIComponent(config.sitemapUrl)}`
    );
    
    console.log('‚úÖ Sitemap soumis √† Yandex avec succ√®s');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  Soumission Yandex √©chou√©e');
    return false;
  }
}

// Fonction pour v√©rifier l'indexation
async function checkIndexing() {
  try {
    console.log('üîç V√©rification de l\'indexation...');
    
    // V√©rifier si le site est accessible
    const response = await axios.get(config.baseUrl, { timeout: 10000 });
    
    if (response.status === 200) {
      console.log('‚úÖ Site accessible et fonctionnel');
      return true;
    } else {
      console.log('‚ùå Site non accessible');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification du site');
    return false;
  }
}

// Fonction pour g√©n√©rer un rapport SEO
function generateSEOReport() {
  const report = {
    date: new Date().toISOString(),
    baseUrl: config.baseUrl,
    sitemapUrl: config.sitemapUrl,
    recommendations: [
      '1. Configurer Google Search Console',
      '2. Configurer Bing Webmaster Tools',
      '3. V√©rifier les Core Web Vitals',
      '4. Optimiser les images',
      '5. Ajouter des backlinks de qualit√©',
      '6. Cr√©er du contenu r√©gulier',
      '7. Optimiser pour les mots-cl√©s locaux',
      '8. Mettre en place le tracking des conversions'
    ],
    nextSteps: [
      'Soumettre manuellement le sitemap aux moteurs de recherche',
      'Configurer Google Analytics 4',
      'Cr√©er un profil Google My Business',
      'Optimiser les meta descriptions',
      'Ajouter des schema markup',
      'Cr√©er des liens internes',
      'Optimiser la vitesse de chargement'
    ]
  };

  const reportPath = path.join(__dirname, '../docs/seo-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  console.log('üìä Rapport SEO g√©n√©r√© :', reportPath);
  return report;
}

// Fonction principale
async function main() {
  console.log('üöÄ D√©marrage de la soumission SEO...\n');
  
  // V√©rifier l'accessibilit√© du site
  const isAccessible = await checkIndexing();
  if (!isAccessible) {
    console.log('‚ùå Le site n\'est pas accessible. V√©rifiez votre configuration.');
    return;
  }
  
  // Soumettre aux moteurs de recherche
  const googleResult = await submitToGoogle();
  const bingResult = await submitToBing();
  const yandexResult = await submitToYandex();
  
  // G√©n√©rer le rapport
  const report = generateSEOReport();
  
  console.log('\nüìà R√©sum√© de la soumission :');
  console.log(`   - Google : ${googleResult ? '‚úÖ' : '‚ö†Ô∏è'}`);
  console.log(`   - Bing : ${bingResult ? '‚úÖ' : '‚ö†Ô∏è'}`);
  console.log(`   - Yandex : ${yandexResult ? '‚úÖ' : '‚ö†Ô∏è'}`);
  
  console.log('\nüéØ Actions recommand√©es :');
  report.recommendations.forEach((rec, index) => {
    console.log(`   ${rec}`);
  });
  
  console.log('\nüìã Prochaines √©tapes :');
  report.nextSteps.forEach((step, index) => {
    console.log(`   ${step}`);
  });
  
  console.log('\n‚ú® Soumission SEO termin√©e !');
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  submitToGoogle,
  submitToBing,
  submitToYandex,
  checkIndexing,
  generateSEOReport
};